package main

import "fmt"

func main() {
	// 通过var关键字直接定义的指针变量是不能进行赋值操作的，因为它的值为nil，也就是还没有指向的内存地址
	var intP1 *int
	fmt.Printf("%#v, %T\n", intP1, intP1)

	// 与普通类型不一样的是，指针类型还可以通过内置的new函数来声明
	// 内置的new函数有一个参数，可以传递类型给它。它会返回对应的指针类型
	// new 函数会给它分配一块内存
	intP2 := new(int)
	// 指针变量的值就是它所指向数据的内存地址，普通变量的值就是我们具体存放的数据。
	fmt.Printf("%#v, %T\n", intP2, intP2)

	// 是否使用指针类型作为接收者
	// 1)如果接收者类型是map、slice、channel这类引用类型，不使用指针。
	// 2)如果需要修改接收者，那么需要使用指针。
	// 3)如果接收者是比较大的类型，可以考虑使用指针，因为内存拷贝廉价，所以效率高。

	// 不使用指针
	// 1)不要对map、slice、channel这类引用类型使用指针。
	// 2)如果需要修改方法接收者内部的数据或者状态时，需要使用指针。
	// 3)如果需要修改参数的值或者内部数据时，也需要使用指针类型的参数。
	// 4)如果是比较大的结构体，每次参数传递或者调用方法都要内存拷贝，内存占用多，这时候可以考虑使用指针。
	// 5)像int、bool这样的小数据类型没必要使用指针。
	// 6)如果需要并发安全，则尽可能地不要使用指针，使用指针一定要保证并发安全。
	// 7)指针最好不要嵌套，也就是不要使用一个指向指针的指针，虽然Go语言允许这么做，但是这会使你的代码变得异常复杂。
}
